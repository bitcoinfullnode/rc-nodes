################################################################################
# Copyright Â© 2013-2015 The Nxt Core Developers.                               #
#                                                                              #
# See the AUTHORS.txt, DEVELOPER-AGREEMENT.txt and LICENSE.txt files at        #
# the top-level directory of this distribution for the individual copyright    #
# holder information and the developer policies on copyright and licensing.    #
#                                                                              #
# Unless otherwise agreed in a custom licensing agreement, no part of the      #
# Nxt software, including this file, may be copied, modified, propagated,      #
# or distributed except according to the terms contained in the LICENSE.txt    #
# file.                                                                        #
#                                                                              #
# Removal or modification of this copyright notice is prohibited.              #
#                                                                              #
################################################################################

# Do not modify this file. Instead, create a nhz.properties file with only the
# properties you need to change, and set them there. The values in 
# nhz.properties override those in nhz-default.properties.



#### SYSTEM ####

# Set the socks proxy host
#socksProxyHost=localhost

# Set the socks proxy port
#socksProxyPort=9050



#### PEER NETWORKING ####

#If true (default) then blocks will be checked during download against a hardcoded checkpoint list
nhz.useCheckpoints=true

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
nhz.shareMyAddress=true

# Port for incoming peer to peer networking requests, if enabled.
nhz.peerServerPort=7774

# Enable UPnP for the peer port
nhz.enablePeerUPnP=true

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all IPv4 interfaces or :: to listen on all IPv4 and
# IPv6 interfaces
nhz.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from nhz.peerServerPort (useful if you do port
# forwarding behind a router).
nhz.myAddress=

# My platform, to be announced to peers.
nhz.myPlatform=PC

# My hallmark, if available.
nhz.myHallmark=

# Default initial peers. Only used if nhz.usePeersDb=true.
# Do not modify. Add custom peers to nhz.wellKnownPeers instead.
nhz.defaultPeers=pool0.horizonplatform.io;pool1.horizonplatform.io;pool2.horizonplatform.io;pool3.horizonplatform.io;pool4.horizonplatform.io;eu1.woll-e.net;api.nhzcrypto.org;eu3.woll-e.net

# A list of well known peer addresses / host names, separated by '; '.
nhz.wellKnownPeers=

# Known bad peers to be blacklisted
nhz.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if nhz.usePeersDb=true.
# Do not modify. Add custom testnet peers to nhz.testnetPeers instead.
nhz.defaultTestnetPeers=eu1.woll-e.net;eu3.woll-e.net;

# Peers used for testnet only.
nhz.testnetPeers=

# Maximum number of inbound connections
nhz.maxNumberOfInboundConnections=250

# Maximum number of outbound connections
nhz.maxNumberOfOutboundConnections=50

# Maintain active connections with at least that many peers.
nhz.maxNumberOfConnectedPublicPeers=20

# Stop adding new peers when number of known peers exceeds that many.
nhz.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
nhz.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
nhz.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
nhz.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
nhz.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer
nhz.useWebSockets=false

# WebSocket connection idle timeout (milliseconds)
nhz.webSocketIdleTimeout=900000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
nhz.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
nhz.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
nhz.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
nhz.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
nhz.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
nhz.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
nhz.enablePeerServerGZIPFilter=true

# Use testnet, leave set to false unless you are really testing.
# Never unlock your real accounts on testnet! Use separate accounts for testing
# only.
# When using testnet, all custom port settings will be ignored,
# and hardcoded ports of 6974 (peer networking), 6975 (UI) and 6976 (API) will
# be used.
nhz.isTestnet=false

# Save known peers in the database
nhz.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
nhz.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
nhz.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# nhz.shareMyAddress=false, nhz.wellKnownPeers=, nhz.testnetPeers= 
# and nhz.usePeersDb=false, and if set to true overrides those properties.
nhz.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
nhz.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
nhz.cjdnsOnly=false



#### API SERVER ####

# Accept http/json API requests.
nhz.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
nhz.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for http/json API requests.
nhz.apiServerPort=7776

# Port for https/json API request. If same as nhz.apiServerPort, the nhz.apiSSL
# setting determines whether SSL is used or not.
nhz.apiServerSSLPort=7776

# Enable UPnP for the API ports
nhz.enableAPIUPnP=false

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces.
nhz.apiServerHost=127.0.0.1

# Idle timeout for http/json API request connections, milliseconds.
nhz.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
nhz.apiResourceBase=html/ui

# Default page for the API server.
nhz.apiWelcomeFile=index.html

# Java API documentation directory, optional.
nhz.javadocResourceBase=html/doc

# Enable Cross Origin Filter for the API server.
nhz.apiServerCORS=false

# Enable SSL for the API server (also need to set nhz.keyStorePath and
# nhz.keyStorePassword).
# Non-SSL connections will be disabled if nhz.apiServerSSLPort is equal to
# nhz.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
nhz.apiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
nhz.apiServerEnforcePOST=true

# Compress Http responses for the API server.
nhz.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# nhz.apiServerHost=127.0.0.1.
nhz.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
nhz.disableAdminPassword=false

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
nhz.maxAPIRecords=100

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
nhz.apiEventTimeout=300

# Maximum number of applications with active event registrations.
nhz.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#nhz.maxUploadFileSize=0


#### OLD NRS USER INTERFACE ####

# Enable the deprecated NRS user interface.
nhz.enableUIServer=false

# Hosts from which to allow NRS user interface requests, if enabled. Set to * to
# allow all.
nhz.allowedUserHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1];

# Port for NRS user interface server.
nhz.uiServerPort=7775

# Host interface for NRS user interface server, default localhost only.
# Set to 0.0.0.0 to allow the UI to be accessed on all network interfaces.
nhz.uiServerHost=127.0.0.1

# Idle timeout for NRS user interface server, milliseconds.
nhz.uiServerIdleTimeout=30000

# Directory with html and javascript files for the NRS client user interface.
nhz.uiResourceBase=html/nrs

# Enable Cross Origin Filter for NRS user interface server.
nhz.uiServerCORS=false

# Enable SSL for the NRS user interface (also need to set nhz.keyStorePath and
# nhz.keyStorePassword).
nhz.uiSSL=false

# Enforce requests that require POST to only be accepted when submitted as POST.
nhz.uiServerEnforcePOST=true



#### DEBUGGING ####

# Log file, will be overwritten at every restart.
#nhz.log=nhz.log
# The log file is now specified in logging.properties.

# Enable debug log output.
#nhz.debug=false
# Debug logging is now specified in logging properties.

# Include caller traceback in log messages.
nhz.enableLogTraceback=false

# Enable logging of exception stack traces.
nhz.enableStackTraces=true

# Enable logging of Jetty messages.
#nhz.debugJetty=false
# Jetty logging is now specified in logging properties.

# Used for debugging peer to peer communications.
nhz.communicationLoggingMask=0

# Track balances of the following accounts and related events for debugging
# purposes.
nhz.debugTraceAccounts=

# File name for logging tracked account balances.
nhz.debugTraceLog=nhz-trace.csv

# Separator character for trace log.
nhz.debugTraceSeparator=\t

# Quote character for trace log.
nhz.debugTraceQuote="

# Log changes to unconfirmed balances.
nhz.debugLogUnconfirmed=false



#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The nhz_db folder is expected to be in the current working directory, will be
# created if missing.
# nhz.dbUrl=jdbc:h2:nhz_db/nhz;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# nhz.testDbUrl=jdbc:h2:nhz_test_db/nhz;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

nhz.dbType=h2
nhz.testDbType=h2

nhz.dbDir=nhz_db/nhz
nhz.testDbDir=nhz_test_db/nhz

nhz.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE
nhz.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE

nhz.dbUsername=sa
nhz.testDbUsername=sa

nhz.dbPassword=sa
nhz.testDbPassword=sa

# Database connection timeout in seconds.
nhz.dbLoginTimeout=70

# Database default lock timeout in seconds.
nhz.dbDefaultLockTimeout=60

# Maximum simultaneous database connections.
nhz.maxDbConnections=30

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
nhz.dbCacheKB=0

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
nhz.trimDerivedTables=true

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
nhz.maxRollback=800

# When trimming is enabled, it is run every nhz.trimFrequency blocks.
nhz.trimFrequency=1000

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet.
nhz.maxPrunableLifetime=0

# Always include prunable parts in transaction json, as long as still available,
# even if expired.
nhz.includeExpiredPrunable=false

# Threshold for logging database statements (milliseconds)
nhz.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds)
nhz.transactionLogThreshold=15000

# Log the average transaction time after this many minutes
nhz.transactionLogInterval=15


#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at
# most 15 s timestamp difference from the block they can be included in.
nhz.forgingDelay=20

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
nhz.forgingSpeedup=3

# Verify batches of blocks downloaded from a single peer with that many other
# peers.
nhz.numberOfForkConfirmations=2
nhz.testnetNumberOfForkConfirmations=0

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
nhz.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
nhz.maxUnconfirmedTransactions=2000



#### VOTING SYSTEM ####

# If disabled, polls are not processed at finish height and results are not
# stored in the database. When requested, poll results will be calculated
# on-the-fly, if the votes are still available.
nhz.processPolls=true



#### MINT ####

# (default: localhost).
# Address of the Horizon server to which the mint worker submits its transactions (default: localhost).
nhz.mint.serverAddress=

# Use Https when connecting to the server. Note that mint worker accepts any SSL
# certificate as valid, without checking hostname or certificate authority,
# therefore this will not protect you against a man-in-the-middle attack when
# submitting mint transactions.
nhz.mint.useHttps=false

# Specify a mintable currency code.
nhz.mint.currencyCode=

# Secret phrase for the minting account, this secret phrase is sent to the host
# specified by nhz.mint.serverAddress therefore do not specify secret phrase of
# an account with lots of funds.
nhz.mint.secretPhrase=

# Number of units to mint per transaction
# The minting difficulty grows linearly with the number of units per mint.
nhz.mint.unitsPerMint=1

# The initial nonce used for minting
# Set to 0 to start with a random nonce.
nhz.mint.initialNonce=0

# Number of concurrency threads used for minting
# Set to 0 allocate one thread per processor core.
nhz.mint.threadPoolSize=0

# When set to false mint transactions are not submitted when a hash is solved.
# Set this value to true to perform actual minting.
nhz.mint.isSubmitted=false

# When set to false the mint worker will resume operation even in case a mint
# transaction has returned an error response
nhz.mint.stopOnError=false



#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
nhz.peerServerDoSFilter.maxRequestsPerSec=30
nhz.peerServerDoSFilter.delayMs=1000
nhz.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
nhz.keyStorePath=keystore
nhz.keyStorePassword=password



#### Developers only ####

# Force re-validation of blocks and transaction at start.
nhz.forceValidate=false

# Force re-build of derived objects tables at start.
nhz.forceScan=false

# Scale epoch time for faster forging. Only works when offline.
# nhz.timeMultiplier=1

# NRS version
nhz.version=NHZ V5.4

# Disable Forging? (if set to true)
nhz.dontForge=false